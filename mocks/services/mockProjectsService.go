// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/esoteloferry/learnMockTest/services (interfaces: IProjects)

// Package services is a generated GoMock package.
package services

import (
	dto "github.com/esoteloferry/learnMockTest/services/dto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIProjects is a mock of IProjects interface
type MockIProjects struct {
	ctrl     *gomock.Controller
	recorder *MockIProjectsMockRecorder
}

// MockIProjectsMockRecorder is the mock recorder for MockIProjects
type MockIProjectsMockRecorder struct {
	mock *MockIProjects
}

// NewMockIProjects creates a new mock instance
func NewMockIProjects(ctrl *gomock.Controller) *MockIProjects {
	mock := &MockIProjects{ctrl: ctrl}
	mock.recorder = &MockIProjectsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIProjects) EXPECT() *MockIProjectsMockRecorder {
	return m.recorder
}

// GetAllProjects mocks base method
func (m *MockIProjects) GetAllProjects() ([]dto.ProjectsResponse, *dto.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects")
	ret0, _ := ret[0].([]dto.ProjectsResponse)
	ret1, _ := ret[1].(*dto.AppError)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects
func (mr *MockIProjectsMockRecorder) GetAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockIProjects)(nil).GetAllProjects))
}
